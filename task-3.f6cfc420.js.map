{"version":3,"sources":["js/task-3.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","Promise","resolve","reject","canProcess","setTimeout","id","logSuccess","time","console","log","logError","warn","amount","then","catch"],"mappings":";AAIA,IAAMA,EAA4B,SAACC,EAAKC,GAC/BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAGhDK,EAAkB,SAACC,GACjBC,IAAAA,EAAQR,EAA0B,IAAK,KACpC,OAAA,IAAIS,QAAQ,SAACC,EAASC,GACnBC,IAAAA,EAAaT,KAAKE,SAAW,GACjCQ,WAAW,WAEbD,EACFF,EAAQH,EAAYO,GAAIN,GAExBG,EAAOJ,EAAYO,KAEpBN,MAKCO,EAAa,SAACD,EAAIE,GACtBC,QAAQC,IAAmBJ,eAAAA,OAAAA,EAAmBE,kBAAAA,OAAAA,EAA9C,QAGIG,EAAW,SAAAL,GACfG,QAAQG,KAAqCN,gCAAAA,OAAAA,EAA7C,+BAGFR,EAAgB,CAAEQ,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETb,EAAgB,CAAEQ,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETb,EAAgB,CAAEQ,GAAI,GAAIO,OAAQ,KAC/BC,KAAKP,GACLQ,MAAMJ,GAETb,EAAgB,CAAEQ,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ","file":"task-3.f6cfc420.js","sourceRoot":"..","sourcesContent":["// Перепиши функцию makeTransaction() так,\r\n// чтобы она не использовала callback - функции onSuccess и onError,\r\n// а принимала всего один параметр transaction и возвращала промис.\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n    return new Promise((resolve, reject) => {\r\n        const canProcess = Math.random() > 0.3;\r\n          setTimeout(() => {\r\n\r\n    if (canProcess) {\r\n      resolve(transaction.id, delay);\r\n    } else {\r\n      reject(transaction.id);\r\n    }\r\n  }, delay);\r\n})\r\n\r\n};\r\n\r\nconst logSuccess = (id, time) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"]}